buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.0.0.RELEASE"
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}


checkstyle {
    toolVersion = "7.0"
}
checkstyleMain {
    configFile = rootProject.file('buildsupport/checkstyle/checkstyle-main.xml')
}
checkstyleTest {
    configFile = rootProject.file('buildsupport/checkstyle/checkstyle-test.xml')
}
checkstyleIntegrationTest {
    configFile = rootProject.file('buildsupport/checkstyle/checkstyle-test.xml')
}


repositories {
    maven {
        url 'https://repo.spring.io/libs-milestone'
    }
    mavenCentral()
}

configurations {
    jaxb
    ajc
    aspects
    compile {
        extendsFrom aspects
    }
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/NLINK.wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema,
                    package: "nlink.wsdl.domain") {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: sourceCompatibility, target: targetCompatibility, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

dependencies {
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.projectlombok:lombok:1.16.10')
    compile("org.springframework.ws:spring-ws-core")
    compile('org.springframework.cloud:spring-cloud-starter-netflix-hystrix')
    compile('io.springfox:springfox-swagger2:2.8.0')
    compile('io.springfox:springfox-swagger-ui:2.8.0')
    compile(files(genJaxb.classesDir).builtBy(genJaxb))
    jaxb ('com.sun.xml.bind:jaxb-xjc:2.1.7')

    ajc('org.aspectj:aspectjtools:1.8.10')
    aspects('org.springframework:spring-aspects:4.3.6.RELEASE')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.github.tomakehurst:wiremock-standalone:2.16.0')

    integrationTestCompile group: 'info.cukes', name: 'cucumber-java', version: '1.2.5'
    integrationTestCompile group: 'info.cukes', name: 'cucumber-junit', version: '1.2.5'
    integrationTestCompile group: 'info.cukes', name: 'cucumber-spring', version: '1.2.5'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Finchley.M8"
    }
}

def aspectj = { destDir, aspectPath, inpath, classpath ->
    ant.taskdef(resource: "org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties",
            classpath: configurations.ajc.asPath)

    ant.iajc(
            maxmem: "1024m", fork: "true", Xlint: "ignore",
            destDir: destDir,
            aspectPath: aspectPath,
            inpath: inpath,
            classpath: classpath,
            source: project.sourceCompatibility,
            target: project.targetCompatibility
    )
}

compileJava {
    doLast {
        aspectj project.sourceSets.main.output.classesDir.absolutePath,
                configurations.aspects.asPath,
                project.sourceSets.main.output.classesDir.absolutePath,
                project.sourceSets.main.runtimeClasspath.asPath
    }
}

bootJar {
    baseName = 'nlinkweb'
    version =  '0.1.0'
    from genJaxb.classesDir
}

task buildDocker(type: Docker, dependsOn: build) {
    push = false
    applicationName = bootJar.baseName
    dockerfile = file('Dockerfile')
    doFirst {
        copy {
            from "${project.buildDir}/libs"
            into stageDir
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}


